// <auto-generated />
using System;
using App.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Repositories.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250628074009_RemoveAssignAtColumn")]
    partial class RemoveAssignAtColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Repositories.Models.ApplicationRevision", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("staff_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("TutorApplicationId")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_revisions");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TutorApplicationId");

                    b.ToTable("application_revisions");
                });

            modelBuilder.Entity("App.Repositories.Models.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AppUserId")
                        .HasColumnType("text")
                        .HasColumnName("app_user_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("like_count");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_blogs");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_blogs_app_user_id");

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("App.Repositories.Models.Chat.ChatConversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.HasKey("Id")
                        .HasName("pk_chat_conversations");

                    b.ToTable("chat_conversations");
                });

            modelBuilder.Entity("App.Repositories.Models.Chat.ChatConversationReadStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ChatConversationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chat_conversation_id");

                    b.Property<DateTime>("LastReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_read_at");

                    b.Property<string>("LastReadChatMessageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_read_chat_message_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_chat_conversation_read_statuses");

                    b.HasIndex("ChatConversationId")
                        .HasDatabaseName("ix_chat_conversation_read_statuses_chat_conversation_id");

                    b.HasIndex("LastReadChatMessageId")
                        .HasDatabaseName("ix_chat_conversation_read_statuses_last_read_chat_message_id");

                    b.HasIndex("UserId");

                    b.ToTable("chat_conversation_read_statuses");
                });

            modelBuilder.Entity("App.Repositories.Models.Chat.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("app_user_id");

                    b.Property<string>("ChatConversationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chat_conversation_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("TextMessage")
                        .HasColumnType("text")
                        .HasColumnName("text_message");

                    b.HasKey("Id")
                        .HasName("pk_chat_messages");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_chat_messages_app_user_id");

                    b.HasIndex("ChatConversationId")
                        .HasDatabaseName("ix_chat_messages_chat_conversation_id");

                    b.ToTable("chat_messages");
                });

            modelBuilder.Entity("App.Repositories.Models.DocumentFileUpload", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("text")
                        .HasColumnName("document_id");

                    b.Property<string>("FileUploadId")
                        .HasColumnType("text")
                        .HasColumnName("file_upload_id");

                    b.HasKey("DocumentId", "FileUploadId");

                    b.HasIndex("FileUploadId")
                        .HasDatabaseName("ix_document_file_uploads_file_upload_id");

                    b.ToTable("document_file_uploads");
                });

            modelBuilder.Entity("App.Repositories.Models.FileUpload", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ChatMessageId")
                        .HasColumnType("text")
                        .HasColumnName("chat_message_id");

                    b.Property<string>("CloudinaryUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cloudinary_url");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_file_name");

                    b.HasKey("Id")
                        .HasName("pk_file_upload");

                    b.HasIndex("ChatMessageId")
                        .HasDatabaseName("ix_file_upload_chat_message_id");

                    b.ToTable("file_upload");
                });

            modelBuilder.Entity("App.Repositories.Models.Hashtag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("usage_count");

                    b.HasKey("Id")
                        .HasName("pk_hashtags");

                    b.ToTable("hashtags");
                });

            modelBuilder.Entity("App.Repositories.Models.LearnerTimeSlotRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DayInWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_in_week");

                    b.Property<DateTime?>("LastViewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_viewed_at");

                    b.Property<string>("LearnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("learner_id");

                    b.Property<int>("SlotIndex")
                        .HasColumnType("integer")
                        .HasColumnName("slot_index");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_learner_time_slot_requests");

                    b.HasIndex("TutorId");

                    b.HasIndex("LearnerId", "TutorId", "DayInWeek", "SlotIndex")
                        .IsUnique();

                    b.ToTable("learner_time_slot_requests");
                });

            modelBuilder.Entity("App.Repositories.Models.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_minutes");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prerequisites");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<string>("TargetAudience")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target_audience");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.HasIndex("TutorId");

                    b.ToTable("lessons");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HardcopySubmitId")
                        .HasColumnType("text")
                        .HasColumnName("hardcopy_submit_id");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<bool>("IsVisibleToLearner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible_to_learner");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("StaffId")
                        .HasColumnType("text")
                        .HasColumnName("staff_id");

                    b.Property<string>("TutorApplicationId")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("HardcopySubmitId")
                        .HasDatabaseName("ix_documents_hardcopy_submit_id");

                    b.HasIndex("StaffId");

                    b.HasIndex("TutorApplicationId");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.HardcopySubmit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("StaffNotes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("staff_notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("Id")
                        .HasName("pk_hardcopy_submits");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_hardcopy_submits_application_id");

                    b.ToTable("hardcopy_submits");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.TutorApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("InternalNotes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("RevisionNotes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("revision_notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_tutor_applications");

                    b.HasIndex("TutorId");

                    b.ToTable("tutor_applications");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.AvailabilitySlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("DayInWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_in_week");

                    b.Property<int>("SlotIndex")
                        .HasColumnType("integer")
                        .HasColumnName("slot_index");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("WeeklyPatternId")
                        .HasColumnType("text")
                        .HasColumnName("weekly_pattern_id");

                    b.HasKey("Id")
                        .HasName("pk_availability_slots");

                    b.HasIndex("WeeklyPatternId")
                        .HasDatabaseName("ix_availability_slots_weekly_pattern_id");

                    b.ToTable("availability_slots");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.BookedSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AvailabilitySlotId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("availability_slot_id");

                    b.Property<DateTime>("BookedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("booked_date");

                    b.Property<string>("BookingSlotId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("booking_slot_id");

                    b.Property<string>("SlotNote")
                        .HasColumnType("text")
                        .HasColumnName("slot_note");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_booked_slots");

                    b.HasIndex("AvailabilitySlotId")
                        .HasDatabaseName("ix_booked_slots_availability_slot_id");

                    b.HasIndex("BookingSlotId")
                        .HasDatabaseName("ix_booked_slots_booking_slot_id");

                    b.ToTable("booked_slots");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.BookingSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("LearnerId")
                        .HasColumnType("text")
                        .HasColumnName("learner_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_booking_slots");

                    b.HasIndex("LearnerId");

                    b.HasIndex("TutorId");

                    b.ToTable("booking_slots");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.WeeklyAvailabilityPattern", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("AppliedFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied_from");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_weekly_availability_patterns");

                    b.HasIndex("TutorId");

                    b.ToTable("weekly_availability_patterns");
                });

            modelBuilder.Entity("App.Repositories.Models.TutorHashtag", b =>
                {
                    b.Property<string>("TutorId")
                        .HasColumnType("text")
                        .HasColumnName("tutor_id");

                    b.Property<string>("HashtagId")
                        .HasColumnType("text")
                        .HasColumnName("hashtag_id");

                    b.HasKey("TutorId", "HashtagId");

                    b.HasIndex("HashtagId")
                        .HasDatabaseName("ix_tutor_hashtags_hashtag_id");

                    b.ToTable("tutor_hashtags");
                });

            modelBuilder.Entity("App.Repositories.Models.TutorLanguage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_code");

                    b.Property<int>("Proficiency")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tutor_id");

                    b.HasKey("Id")
                        .HasName("pk_tutor_languages");

                    b.HasIndex("TutorId");

                    b.ToTable("tutor_languages");
                });

            modelBuilder.Entity("App.Repositories.Models.User.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime?>("CodeGeneratedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("code_generated_time");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<int?>("EmailCode")
                        .HasColumnType("integer")
                        .HasColumnName("email_code");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ProfilePicturePublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_public_id");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk___users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("__users", (string)null);
                });

            modelBuilder.Entity("App.Repositories.Models.User.Learner", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_code");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency_level");

                    b.HasKey("UserId");

                    b.ToTable("learners");
                });

            modelBuilder.Entity("App.Repositories.Models.User.Staff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("UserId");

                    b.ToTable("staffs");
                });

            modelBuilder.Entity("App.Repositories.Models.User.Tutor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("BecameTutorAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("became_tutor_at");

                    b.Property<string>("Brief")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brief");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastStatusUpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_status_update_at");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nick_name");

                    b.Property<string>("TeachingMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("teaching_method");

                    b.HasKey("UserId");

                    b.ToTable("tutors");
                });

            modelBuilder.Entity("AppUserChatConversation", b =>
                {
                    b.Property<string>("AppUsersId")
                        .HasColumnType("text");

                    b.Property<string>("ChatConversationId")
                        .HasColumnType("text");

                    b.HasKey("AppUsersId", "ChatConversationId");

                    b.HasIndex("ChatConversationId");

                    b.ToTable("user_conversations", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk___roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("__roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk___role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix___role_claims_role_id");

                    b.ToTable("__role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk___user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix___user_claims_user_id");

                    b.ToTable("__user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk___user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix___user_logins_user_id");

                    b.ToTable("__user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk___user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix___user_roles_role_id");

                    b.ToTable("__user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk___user_tokens");

                    b.ToTable("__user_tokens", (string)null);
                });

            modelBuilder.Entity("App.Repositories.Models.ApplicationRevision", b =>
                {
                    b.HasOne("App.Repositories.Models.Papers.TutorApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_application_revisions__tutor_applications_application_id");

                    b.HasOne("App.Repositories.Models.User.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_application_revisions__staffs_staff_temp_id");

                    b.HasOne("App.Repositories.Models.Papers.TutorApplication", null)
                        .WithMany("ApplicationRevisions")
                        .HasForeignKey("TutorApplicationId");

                    b.Navigation("Application");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("App.Repositories.Models.Blog", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_blogs___users_app_user_id");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Repositories.Models.Chat.ChatConversationReadStatus", b =>
                {
                    b.HasOne("App.Repositories.Models.Chat.ChatConversation", "ChatConversation")
                        .WithMany("ChatConversationReadStatus")
                        .HasForeignKey("ChatConversationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_chat_conversation_read_statuses_chat_conversations_chat_con~");

                    b.HasOne("App.Repositories.Models.Chat.ChatMessage", "LastReadChatMessage")
                        .WithMany("ChatConversationReadStatuses")
                        .HasForeignKey("LastReadChatMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_chat_conversation_read_statuses__chat_messages_last_read_chat~");

                    b.HasOne("App.Repositories.Models.User.AppUser", "AppUser")
                        .WithMany("ChatConversationReadStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_chat_conversation_read_statuses___users_app_user_id");

                    b.Navigation("AppUser");

                    b.Navigation("ChatConversation");

                    b.Navigation("LastReadChatMessage");
                });

            modelBuilder.Entity("App.Repositories.Models.Chat.ChatMessage", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_chat_messages___users_app_user_id");

                    b.HasOne("App.Repositories.Models.Chat.ChatConversation", "ChatConversation")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_messages_chat_conversations_chat_conversation_id");

                    b.Navigation("AppUser");

                    b.Navigation("ChatConversation");
                });

            modelBuilder.Entity("App.Repositories.Models.DocumentFileUpload", b =>
                {
                    b.HasOne("App.Repositories.Models.Papers.Document", "Document")
                        .WithMany("DocumentFileUploads")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_document_file_uploads__documents_document_id");

                    b.HasOne("App.Repositories.Models.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_document_file_uploads__file_upload_file_upload_id");

                    b.Navigation("Document");

                    b.Navigation("FileUpload");
                });

            modelBuilder.Entity("App.Repositories.Models.FileUpload", b =>
                {
                    b.HasOne("App.Repositories.Models.Chat.ChatMessage", null)
                        .WithMany("FileUploads")
                        .HasForeignKey("ChatMessageId")
                        .HasConstraintName("fk_file_upload_chat_messages_chat_message_id");
                });

            modelBuilder.Entity("App.Repositories.Models.LearnerTimeSlotRequest", b =>
                {
                    b.HasOne("App.Repositories.Models.User.Learner", "Learner")
                        .WithMany("TimeSlotRequests")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learner_time_slot_requests__learners_learner_temp_id1");

                    b.HasOne("App.Repositories.Models.User.Tutor", "Tutor")
                        .WithMany("TimeSlotRequests")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learner_time_slot_requests__tutors_tutor_temp_id1");

                    b.Navigation("Learner");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("App.Repositories.Models.Lesson", b =>
                {
                    b.HasOne("App.Repositories.Models.User.Tutor", "Tutor")
                        .WithMany("Lessons")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lessons__tutors_tutor_temp_id2");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.Document", b =>
                {
                    b.HasOne("App.Repositories.Models.Papers.TutorApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_documents__tutor_applications_application_id");

                    b.HasOne("App.Repositories.Models.Papers.HardcopySubmit", "HardcopySubmit")
                        .WithMany("Documents")
                        .HasForeignKey("HardcopySubmitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_documents__hardcopy_submits_hardcopy_submit_id");

                    b.HasOne("App.Repositories.Models.User.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_documents__staffs_staff_temp_id1");

                    b.HasOne("App.Repositories.Models.Papers.TutorApplication", null)
                        .WithMany("Documents")
                        .HasForeignKey("TutorApplicationId");

                    b.Navigation("Application");

                    b.Navigation("HardcopySubmit");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.HardcopySubmit", b =>
                {
                    b.HasOne("App.Repositories.Models.Papers.TutorApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_hardcopy_submits__tutor_applications_application_id");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.TutorApplication", b =>
                {
                    b.HasOne("App.Repositories.Models.User.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_tutor_applications__tutors_tutor_temp_id3");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.AvailabilitySlot", b =>
                {
                    b.HasOne("App.Repositories.Models.Scheduling.WeeklyAvailabilityPattern", "WeeklyPattern")
                        .WithMany("Slots")
                        .HasForeignKey("WeeklyPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_availability_slots__weekly_availability_patterns_weekly_patter~");

                    b.Navigation("WeeklyPattern");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.BookedSlot", b =>
                {
                    b.HasOne("App.Repositories.Models.Scheduling.AvailabilitySlot", "AvailabilitySlot")
                        .WithMany()
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booked_slots_availability_slots_availability_slot_id");

                    b.HasOne("App.Repositories.Models.Scheduling.BookingSlot", "BookingSlot")
                        .WithMany("BookedSlots")
                        .HasForeignKey("BookingSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booked_slots__booking_slots_booking_slot_id");

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("BookingSlot");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.BookingSlot", b =>
                {
                    b.HasOne("App.Repositories.Models.User.Learner", "Learner")
                        .WithMany("BookingSlots")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_booking_slots__learners_learner_temp_id");

                    b.HasOne("App.Repositories.Models.User.Tutor", "Tutor")
                        .WithMany("BookingSlots")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_slots__tutors_tutor_temp_id");

                    b.Navigation("Learner");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.WeeklyAvailabilityPattern", b =>
                {
                    b.HasOne("App.Repositories.Models.User.Tutor", "Tutor")
                        .WithMany("AvailabilityPatterns")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weekly_availability_patterns__tutors_tutor_temp_id6");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("App.Repositories.Models.TutorHashtag", b =>
                {
                    b.HasOne("App.Repositories.Models.Hashtag", "Hashtag")
                        .WithMany()
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tutor_hashtags_hashtags_hashtag_id");

                    b.HasOne("App.Repositories.Models.User.Tutor", "Tutor")
                        .WithMany("Hashtags")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tutor_hashtags__tutors_tutor_temp_id4");

                    b.Navigation("Hashtag");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("App.Repositories.Models.TutorLanguage", b =>
                {
                    b.HasOne("App.Repositories.Models.User.Tutor", "Tutor")
                        .WithMany("Languages")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tutor_languages__tutors_tutor_temp_id5");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("App.Repositories.Models.User.Learner", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("App.Repositories.Models.User.Learner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_learners___users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Repositories.Models.User.Staff", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("App.Repositories.Models.User.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_staffs___users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Repositories.Models.User.Tutor", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", "User")
                        .WithOne()
                        .HasForeignKey("App.Repositories.Models.User.Tutor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tutors___users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppUserChatConversation", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Repositories.Models.Chat.ChatConversation", null)
                        .WithMany()
                        .HasForeignKey("ChatConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk___role_claims___roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk___user_claims___users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk___user_logins___users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk___user_roles___roles_role_id");

                    b.HasOne("App.Repositories.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk___user_roles___users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("App.Repositories.Models.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk___user_tokens___users_user_id");
                });

            modelBuilder.Entity("App.Repositories.Models.Chat.ChatConversation", b =>
                {
                    b.Navigation("ChatConversationReadStatus");

                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("App.Repositories.Models.Chat.ChatMessage", b =>
                {
                    b.Navigation("ChatConversationReadStatuses");

                    b.Navigation("FileUploads");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.Document", b =>
                {
                    b.Navigation("DocumentFileUploads");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.HardcopySubmit", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("App.Repositories.Models.Papers.TutorApplication", b =>
                {
                    b.Navigation("ApplicationRevisions");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.BookingSlot", b =>
                {
                    b.Navigation("BookedSlots");
                });

            modelBuilder.Entity("App.Repositories.Models.Scheduling.WeeklyAvailabilityPattern", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("App.Repositories.Models.User.AppUser", b =>
                {
                    b.Navigation("ChatConversationReadStatuses");
                });

            modelBuilder.Entity("App.Repositories.Models.User.Learner", b =>
                {
                    b.Navigation("BookingSlots");

                    b.Navigation("TimeSlotRequests");
                });

            modelBuilder.Entity("App.Repositories.Models.User.Tutor", b =>
                {
                    b.Navigation("AvailabilityPatterns");

                    b.Navigation("BookingSlots");

                    b.Navigation("Hashtags");

                    b.Navigation("Languages");

                    b.Navigation("Lessons");

                    b.Navigation("TimeSlotRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
